


	=== УПРАВЛЕНИЕ ПЕРЕГРУЗКОЙ ===
		
		- есть обратный случай, когда ограничение по передаче данных стоит не на стороне получателя, а на стороне
		  отправителя. Если точнее, то в сети может возникнуть перегрузка, из-за того, что большое количество
		  устройств решили передавать данные одновременно. Маршрутизаторы не способны передать такое количество
		  пакетов в единицу времени. Они вынуждены отбрасывать пакеты.
		  • Т.е. перегрузка - это когда в сеть передается большое количество данных, однако большая часть из этих данных
			отбрасывается маршрутизаторами и не доходит до получателя.
		  • Таким образом, большая часть каналов в сети занята, но полезные данные от отправителя до получателя почти
			не доходят.

			•• Первый раз такая ситуация произошла в интернет в 1984 году. Она называлась коллапс перегрузки.
			•• Чтобы решить эту проблему, стали учитывать загрузку сети при формировании размера окна.
			   Количество передаваемых сегментов стали определять динамически в зависимости от нагрузки сети
			   (раньше статически выбиралось 8)
			•• Механизм реализации: ОКНО ПЕРЕГРУЗКИ
		  
		  • Таким образом, в TCP есть 2 размера окна - окно управления потоком и окно перегрузки, которое существует
			на стороне отправителя, и размер которого зависит оттого, какая нагрузка на сеть. 

		  
		СКОРОСТЬ ПЕРЕДАЧИ ДАННЫХ:

		* Окна управления потоком и перегрузки решают более общую задачу - управление скоростью передачи данных в TCP
		* Метод для опредления окна перегрузки - AIMD (Additive increase/multiplicative decrease) - аддитивное
		  увеличение, мультипликативное уменьшение.
		  Суть метода:
			- заключается в том, что при получении подтверждения, мы прибавляем к размеру окна некоторое значение
			  (как правило, это размер одного сегмента TCP - MSS, максимальный размер сегмента)
			- а если перегрузка произошла, то мы умножаем размер окна на некоторое значение
			  (как правило, это 1/2. Т.е. размер окна уменьшается в 2 раза)

		
		КАК ОТПРАВИТЕЛЬ УЗНАЕТ О ПЕРЕГРУЗКЕ:

		* Это достаточно сложная задача, потому что сеть может быть составной. И перегрузка может быть получена не на
		  том сегменте сети, к которому подключен отправитель, а на каком-то сегменте между отправителем и получателем,
		  который находится достаточно далеко от того и другого.
		* Чаще всего в качестве сигнала о перегрузке используется сигнал о ПОТЕРЕ СЕГМЕНТА.
		  Считается, что сейчас каналы связи хорошего качества. И сегмент потерян не из-за ошибки в канале, а из-за
		  перегрузки.
		* Есть также: ЗАДЕРЖКА СЕГМЕНТА
					  СИГНАЛ ОТ МАРШРУТИЗАТОРА


		ПРОБЛЕМА AIMD:
		
		* медленный рост размера окна перегрузки
			• приемлемо для медленных каналов связи 
			• неприемлемо для современных каналов связи
		* предложен другой метод управления размером окна - МЕДЛЕННЫЙ СТАРТ:
			• при подтверждении размер окна увеличивается не на 1 сегмент, а в 2 раза
			• получается экспоненциальный рост
			• если произошла потеря сегмента, то размер окна уменьшается до ноля (это недостаток метода)


		РЕАЛИЗАЦИЯ НА ПРАКТИКЕ:

		* В TCP используется комбинация медленного старта и AIMD:
			• сначала используется медленный старт, чтобы быстро заполнить пропускную способность канала
			• после того, как размер окна достиг определенного значения, так называемый ПОРОГ МЕДЛЕННОГО СТАРТА,
			  происходит переход на AIMD
			• ПОРОГ МЕДЛЕННОГО СТАРТА определяется так: сначала запускается МЕДЛЕННЫЙ СТАРТ и работает до того,
			  пока не поступит сигнал о перегрузке. После этого размер окна, при котором произошел перегруз, делится
			  в 2 раза


		
		ПРОБЛЕМЫ СИГНАЛА "ПОТЕРЯ СЕГМЕНТА"

			• TCP создает перегрузку. Работает в режиме, который приводит к перегрузке.
				- размер окна постоянно увеличивается
				- окно уменьшается только после перегрузки
				- предотвратить перегрузку нельзя
			• Глобальная синхронизация TCP (TCP global synhronization)
				- заключается в том, что, когда на маршрутизаторе произошла перегрузка, заканчивается место в буфере,
				  он отбрасывает сегменты всех отправителей
				- отправители получают сигнал о перегрузке и уменьшают размер окна
				- в TCP нет встроенной задержки, как в Ethernet или Wi-Fi, поэтому все отправители после уменьшения
				  размера окна начинают передавать данные почти одновременно. В результате на маршрутизатор опять
				  приходит большое количество пакетов, что приводит к перегрузке. Чтобы решить эти проблемы, используются
				  другие сигналы о перегрузке

			ЗАДЕРЖКА СЕГМЕНТА:
			
			* В этом случае измеряется around trip time - время движения от отправителя до получателя и обратно.
			  Отправитель, передавая сегменты, засекает around trip time, измеряет среднее время и при существенном
			  увеличении ATT уменьшает размер окна перегрузки. Это позволяет обнаружить перегрузку до того, как она
			  произошла
			* Этот метод проще внедрить, т.к. он требует изменений только на стороне отправителя сообщений
				ПРОБЛЕМЫ СИГНАЛА "ЗАДЕРЖКА СЕГМЕНТА"
				• надежности ниже, чем у потери сегмента, потому что задержка может быть вызвана другими причинами
				• несправедливое распределение пропускной способности на загруженнных каналах. В случае, когда мы
				  используем сигнал задержка сегмента, а другие компьютеры потерю сегмента. Мы уменьшаем размер окна,
				  а они продолжают увеличивать
				РЕШЕНИЕ:
				• решением является совместное использование двух сигналов - задержки и потери
				• Пример: такой подход используется в протоколе Compound TCP компании Microsoft


			СИГНАЛ МАРШРУТИЗАТОРА:
			
			* Для использования этого сигнала маршрутизаторы должны поддерживать отправку сигнала. Это более совершенная
			  технология, нежели задержка и потеря сегментов. У нее:
				- высокая надежность
				- быстрое обнаружение перегрузки
				- необходимо взаимодействие сетевого и транспортного уровня
				- необходимо вносить изменения в отправителе, получателе и во все промежуточные маршрутизаторы
			* Технологии поддерживающие отправку:
				• Random Early Detection - маршрутизатор начинает с некоторой вероятностью отбрасывать пакеты еще до
				  того, как буфер полностью заполнен и началась перегрузка. В результате отправитель узнает о возможной
				  перегрузке по потере сегмента еще до того, как она произошла. Получает возможность заранее уменьшить
				  окно перегрузки. Но это не явный тип сигнала
				• Explicit Congestion Notification - обеспечивает явную отправку от маршрутизатора к отправителю о том,
				  в сети происходит перегрузка. Как это происходит:
					- отправитель передает сегмент в сеть, который доходит до маршрутизатора
					- маршрутизатор находится в состоянии близком к перегрузке. Буфер заполнен, но не полностью
					- для того, чтобы предупредить отправителя о перегрузке в сети, маршрутизатор устанавливает
					  специальные флаги в заголовке IP, которые говорят о том, что в сети произошла перегрузка
					- сегмент передается по сети дальше и достигает получателя
					- получатель в заголовке IP видит флаг, свидетельствующий о перегрузке
					- для того, чтобы о перегрузке узнал не только отправитель, но и получатель, получатель устанавливает
					  в заголовке TCP соответствующие флаги, когда передает подтверждение
					- отправитель получает подтвереждение доставки сообщения и в этом подтверждении видит, что флаг
					  о перегрузке установлен. Это будет сигнал о том, что нужно уменьшить размер окна перегрузки
				  * ПОЛЯ В ЗАГОЛОВКЕ IP и TCP о перегрузке:
					** в IP ПОЛЕ ТИП СЕРВИСА - используется 2 бита. 00 - перегрузки нет, 11 - произошла перегрузка
					** в TCP три флага - NS, CWR, ECE
						-- ECE (ECN-Echo) - устанавливается получателем при получении сигнала о перегрузке
						-- CWR (Congestion Window Reduced) - устанавливается отправителем для подтверждения получения
						   сиганала о перегрузке. Который говорит, что размер окна управления перегрузкой уменьшен
						-- NS (ECN-nonce concealment protection) - защита от случайного или злонамеренного изменения
						   полей флагов, которые относятся к технологии ECN 
		
